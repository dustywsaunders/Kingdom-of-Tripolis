'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var howlerIntegration = require('./howler_integration');

var _require = require('./utils'),
    isObjectWithValues = _require.isObjectWithValues;

function soundsMiddleware(soundsData) {
  if ((typeof soundsData === 'undefined' ? 'undefined' : _typeof(soundsData)) !== 'object') {
    throw Error({
      name: 'missingSoundData',
      message: '\n        Please provide an object to soundsMiddleware!\n        When initializing, it needs an object holding all desired sound data.\n        See https://github.com/joshwcomeau/redux-sounds/#troubleshooting\n      '
    });
  }

  // Set up our sounds object, and pre-load all audio files.
  // Our sounds object basically just takes the options provided to the
  // middleware, and constructs a new Howl object for each one with them.
  howlerIntegration.initialize(soundsData);

  return function (store) {
    return function (next) {
      return function (action) {
        // Ignore actions that haven't specified a sound.
        if (!action.meta || !isObjectWithValues(action.meta.sound)) {
          return next(action);
        }
        var methods = Object.keys(action.meta.sound);
        methods.forEach(function (method) {
          var target = action.meta.sound[method];
          if (Array.isArray(target)) {
            var _target$0$split = target[0].split('.'),
                _target$0$split2 = _slicedToArray(_target$0$split, 2),
                soundName = _target$0$split2[0],
                spriteName = _target$0$split2[1];

            howlerIntegration.proxy.apply(howlerIntegration, [soundName, spriteName, method].concat(_toConsumableArray(target.slice(1))));
          } else {
            var _target$split = target.split('.'),
                _target$split2 = _slicedToArray(_target$split, 2),
                _soundName = _target$split2[0],
                _spriteName = _target$split2[1];

            howlerIntegration.proxy(_soundName, _spriteName, method);
          }
        });
        return next(action);
      };
    };
  };
}

module.exports = soundsMiddleware;